#!/usr/bin/perl -w

# mysnpp v0.42

# mysnpp by Aaron C. de Bruyn <code@darkpixel.com>
# This script is released to the public domain.
# Use it, modify it, share it, hack it.  Enjoy it.
# http://www.darkpixel.com/

use strict;
use IO::Socket qw (:DEFAULT :crlf);
use Term::ReadLine;

my $globerror = '';

my %receiverlist = (
	"EMS742"             => [ "CookPaging", "3606901574" ],
	"SCSO732"            => [ "CookPaging", "3604185871" ],
);

my %provider = (
    "CommunicationsSpecialists"  => [ "pageme.comspeco.com",       444,      0 ],
    "ContactPaging"              => [ "207.140.31.163",            444,      0 ],
    "CookPaging"                 => [ "67.115.154.70",             444,    250 ],
    "CTC"                        => [ "snpp.metrocall.com",        444,      0 ],
    "DataComm"                   => [ "209.191.211.38",            444,      0 ],
);

sub ReceiverExists {
	my $recvr = shift;
	return exists $receiverlist{"$recvr"}
}

sub ProviderExists {
	my $provdr = shift;
	return exists $provider{"$provdr"}
}

sub GetProvider {
	my $current = shift;
	return $receiverlist{"$current"}[0];
}

sub GetProviderIP {
	my $current = shift;
	return $provider{$receiverlist{"$current"}[0]}[0];
}

sub GetProviderPort {
	my $current = shift;
	return $provider{$receiverlist{"$current"}[0]}[1];
}

sub GetProviderMaxChars {
	my $current = shift;
	return $provider{$receiverlist{"$current"}[0]}[2];
}

sub GetRecipientNumber {
	my $current = shift;
	return $receiverlist{"$current"}[1];
}

sub GetMessageFromConsole {
	my $term = new Term::ReadLine "$0";
	return $term->readline('');
}

sub connectTo {
	my ($server, $port) = @_;
	socket(SERVER, PF_INET, SOCK_STREAM, getprotobyname('tcp')) || block {
		$globerror = "Unable to create socket connection to [$server] on [$port]";
		return 0;
	};
	
	my $inet_aton = inet_aton($server) || block {
		$globerror = "Unable to resolve [$server]";
		return 0;
	};
	
	my $dest = sockaddr_in($port, $inet_aton) || block {
		$globerror = "Unable to create data structure sockaddr_in [$port] [$inet_aton]";
		return 0;
	};

	connect(SERVER, $dest) || block {
		$globerror = "Unable to connect to [$server] on [$port]";
		return 0;
	};

	select(SERVER);
	$| = 1;
	select(STDOUT);
	return 1;
}

sub SNPPChat {
	my ($receiver, $message) = @_;
	my $status = <SERVER>;
	if ( $status !~ /220/i ) {
		$status =~ s/$CRLF//;
		$globerror = "The paging server greeted us with [$status]";
		return 0;
	}
	
	print SERVER "PAGE $receiver$CRLF";
	$status = <SERVER>;
	if ( $status !~ /250/i ) {
		$status =~ s/$CRLF//;
		$globerror = "Receiver [$receiver] was rejected with error [$status]";
		return 0;
	}
	
	print SERVER "MESS $message$CRLF";
	$status = <SERVER>;
	if ( $status !~ /250/i ) {
		$status =~ s/$CRLF//;
		$globerror = "Message entered with error [$status]";
		return 0;
	}
	
	print SERVER "SEND$CRLF";
	$status = <SERVER>;
	if ( $status !~ /250/i ) {
		$status =~ s/$CRLF//;
		$globerror = "Message rejected with error [$status]";
		return 0;
	}
	
	print SERVER "QUIT$CRLF";
	$status = <SERVER>;
	if ( $status !~ /221/i ) {
		$status =~ s/$CRLF//;
		$globerror = "Disconnect failed with error [$status]";
		return 0;
	}
	return 1;
}




my $totalreceivers = 0;

foreach (@ARGV) {
	if (!ReceiverExists($_)) {
		print "Unable to locate: $_\n";
	} else {
		$totalreceivers++;
	}
}

if ( $totalreceivers > 0 ) {
	print "Type message--when finished, hit ENTER to send.\n";

	my $msgtosend = GetMessageFromConsole;
	
	foreach (@ARGV) {
		if (ReceiverExists($_)) {
			print "Paging $_...";
			
			if ( connectTo(GetProviderIP($_), GetProviderPort($_)) ) {
				if ( SNPPChat(GetRecipientNumber($_),$msgtosend) ) {
					print "done!\n";
				} else {
					print "ERROR\n";
					print "SNPPChat: [$globerror]\n";
				}
			} else {
				print "ERROR\n";
				print "ConnectTo: [$globerror]\n";
			}
			close SERVER;

			# print "Paging: ", $_, "\n";
			# print "Provider: ", GetProvider($_), "\n";
			# print "Number: ", GetRecipientNumber($_), "\n";
			# print "Server IP: ", GetProviderIP($_), "\n";
			# print "Server Port: ", GetProviderPort($_), "\n";
			# print "Max Chars: ", GetProviderMaxChars($_), "\n";
			# print "--done--\n"
		}
	}
} else {
	print "No recipients!\n";
}
